// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MarksManagmtSys {
    struct Student {
        int ID;
        string fName;
        string lName;
        int marks;
    }

    address public owner;
    int public stdCount = 0;
    mapping(int => Student) public stdRecords;

    // Modifier to restrict access to only the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Not authorized");
        _;
    }

    // Constructor sets the contract deployer as the owner
    constructor() {
        owner = msg.sender;
    }

    // Function to add a new student record
    function addNewRecord(int _ID, string memory _fName, string memory _lName, int _marks) 
        public 
        onlyOwner 
    {
        stdCount++;
        stdRecords[_ID] = Student(_ID, _fName, _lName, _marks);
    }

    // Function to add bonus marks to a student by their ID
    function addBonusMarks(int _ID, int _bonus) public onlyOwner {
        stdRecords[_ID].marks += _bonus;
    }
}
